---
title: "Interactive Presentation"
subtitle: "Using Observable"
author: "Oliver"
format:
  revealjs:
    page-layout: full
    embed-resources: true 
    theme: [default, ../shared_stuff/oliver_slides.scss]
    slide-number: true
    #smaller: true  
    scrollable: true
    # Geht nicht zum html exportieren 
    #chalkboard: 
    #  buttons: false
    preview-links: auto
    controls-layout: edges
    logo: ../shared_stuff/images/ios.png
    footer: <https://www.ios.htwg-konstanz.de/>
---

## Interactive Visualizations

My summary from 11/Feb/2023

-   Interactive visualizations are best made with html.

-   Presentation Tools

    -   Powerpoint and google-docs do not consistently allow to embed HTML

    -   Quatro

        -   Can an embed HTML nicely

        -   Nice presentation with <https://revealjs.com> (pdf and standallone html OK)

    -   Other

        -   <https://slides.com/> (Visual editor for reveal.js not checked yet)

-   Interactivity

    -   **html_widgets** (not all widgets work)

    -   **Shiny** (needs server)

    -   **Observable.js** (nice interactive alternative) not yet 100% sure what happens

::: notes
Speaker notes go here.
:::

## Observable (Development)

Workflow

Observable.js is java script library for interactivity. Best way is to develop them on a website called

-   <https://observablehq.com/> (head quarter)

You can then include the code via copy&paste into the cell (or) do it differently.

## Observable (Resources)

-   [InfoWorld: A beginners' guide to using JavaScript, R](https://www.infoworld.com/article/3674789/a-beginners-guide-to-using-observable-javascript-r-and-python-with-quarto.html)

-   Quarto Docu <https://quarto.org/docs/computations/ojs.html>

## Observable

Is like a reactive framework. Variables listen to their changes and can be used before they are defined. It can be easily used with quatro (also to make interactive slides).

The cool thing is that you can include functions from the community very easily. The following code downloads the summary-table

```{ojs}
//| echo: true
import { SummaryTable } from "@observablehq/summary-table"
```

## Importing the data and visualizing {.smaller}

This is the data in R:

```{R data_in_r}
dat = data.frame(matrix(ncol=2, nrow=33, c(22,131,41,139,52,128,23,128,41,171,54,105,24,116,46,137,56,145,27,106,47,111,57,141,28,114,48,115,58,153,9,123,49,133,59,157,30,117,49,128,63,155,32,122,50,183,67,176,33,99,51,130,71,172,35,121,51,133,77,178,40,147,51,144,81,217), byrow = TRUE))
colnames(dat) = c('x', 'y')
head(dat,3)
```

To use the data in observable

```{r to_obs, echo=TRUE}
  ojs_define(datt = dat)
  #Ignore the error msg
  # To write data which can be used later in obersvableHQ
  #write.csv2(american.woman, "~/Downloads/data.csv", row.names = FALSE)
```

```{ojs}
  // Inputs.table(aa) gives type error not itterable
  dat = transpose(datt)
  Inputs.table(dat)
  
  //For saving not working yet
  //d3 = require("d3")
  //d3.(mydata, "~/Dowload/data.csv");
```

## Importing from the cloud {.smaller}

It has been uploaded a while ago into ObservableHQ and can be used from there via the following command

```{ojs}
// |echo: true
import {american1Woman} from "50b32fe191bd30ce"
```

::: columns
::: {.column width="40%"}
Click on the car to filter. The right table will update

To create a dynamic variable you can use `viewof` and a imput widgets, [see](https://quarto.org/docs/interactive/ojs/libraries.html).

```{ojs}
//| echo: true
viewof table = Inputs.table(american1Woman)
```
:::

::: {.column width="60%"}
```{ojs}
//| echo: true
SummaryTable(table)
```
:::
:::

# Plotting

## Resources

* <https://observablehq.com/@observablehq/plot>


## Layout
* https://observablehq.com/@observablehq/views



## The Data (working){auto-animate=true, auto-animate-easing="ease-in-out"}
::: {data-id="lr" auto-animate-delay="0.1"}
```{ojs}
function lr(pw){
 return(
  Plot.plot({
  marks: [
    Plot.dot(dat, {x: "x", y: "y"}),
    Plot.line(curve(dat), {x: "x", y: "y"})
  ],
  y: {
    label: "Blutdruck",
    domain: [80,200]
  },
  x: {
    label: "Alter",
    domain: [15,80]
  },
  width: pw,
  height: pw/1.5,
  color: "steelblue"
})
)
} 

function curve(template){
  const ages = template.map(d => d.x);
  const [minAge, maxAge] = d3.extent(ages);
  const xvals = d3.range(minAge, maxAge, (maxAge - minAge) / 100); 
  let yhat = xvals.map(x => w*x + b);
  return xvals.map((x, i) => ({x, y: yhat[i]})); //Thanks ChatGPT
}

lr(900)
```
:::
## Plot (Second Version){auto-animate=true, auto-animate-easing="ease-in-out"}


```{ojs}
lr(700)
```

```{ojs}
//| panel: sidebar
b_view = Inputs.range([-10, 120], {label: "Intercept", step: 0.1})
w_view = Inputs.range([-5, 5], {label: "Slope", step: 0.1})
b = Generators.input(b_view)
w = Generators.input(w_view)


function color(value) {
  return  d3.scaleLinear().domain([-1, 0, 1]).range(['blue', 'gray', 'green'])(value);
}
function lw(value) {
  return d3.scaleLinear().domain([-1, 1]).range([0.1, 1])(value);
}
dot`${my_graph}`
my_graph = `digraph {
  node [fontsize=20, fontname=Arial];
  node [fixedsize=true, width=0.6, height=0.6];
  edge [arrowhead=vee, arrowsize=0.7];

  //b -> Y[penwidth=${10*lw(Math.abs(b))}, label=${b}]; //<-- Change the factor here
  b -> Y[penwidth=2, label=${b}];
  x1 -> Y[penwidth=2, label=${w}];
  
  x1 [label="x", pos="0,0"]; 
  b  [label="1", pos="0,2"]; 
  Y  [label="y", pos="1,0.8"]; 
  //x1 [label="x", pos="0,0"];
  //b  [label="1", pos="2,0"];
  //Y  [label="y", pos="1,1"];
}`
```


# Backup


## Dumm
```{ojs}
dot`${my_graph}`
```


## Plot (D3)

```{ojs}

Plot.plot({
  marks: [
    Plot.dot(dat, {x: "x", y: "y"}),
    Plot.line(curve(dat), {x: "x", y: "y"})
  ],
  y: {
    domain: [80,200]
  },
  x: {
    domain: [15,80]
  }
})
```

```{ojs}
//| panel: sidebar
layoutWidth
draw(network, width, height, thickness)
import {draw} from "@oduerr/visualizing-neural-networks"
scale = 1
width = 250*scale
nodes_rad = 30*scale
fs = 20*scale
off_x = -15*scale
height = 300*scale
thickness = 10*scale
network = ({
  nodes: [
    {id: '1-1', nr: 1, layer: 1, label: 'X'}, {id: '1-2', nr: 2, layer: 1, label: '1'},
    {id: '2-1', nr: 1, layer: 2, label: 'Y'}
  ],
  edges: [
    {s: '1-1', t: '2-1', w: w},
    {s: '1-2', t: '2-1', w: b/10}
  ]
})
```









